setwd("~/Dropbox/Pandas_Missing_Data")
# load libraries
suppressMessages(library(tidyverse))
theme_set(theme_light())
df <- read_csv("train.csv")
# look at dataset
skimr::skim(df)
head(df)
# MCAR test
set.seed(42)
df_100 <- sample_n(df, 100)
BaylorEdPsych::LittleMCAR(df_100)
# p-value < 0.05 reject null hypothesis (data is MCAR) in favor of alternate
library(VIM)
# visualize missing values
aggr(df)
# visualize missing values
a <- aggr(df, plot = FALSE)
plot(a, numbers = TRUE, prop = FALSE)
# visualize missing values
visdat::vis_dat(df)
# visualize missing values
visdat::vis_dat(df, palette = "qual")
visdat::vis_miss(df)
library(naniar)
# visualize `age` missing values by `Pclass`
df %>%
ggplot(aes(Pclass, Age)) +
geom_miss_point()
# visualize `age` missing values by `Sex`
df %>%
ggplot(aes(Sex, Age)) +
geom_miss_point()
# visualize `age` missing values by `Sex`
df %>%
ggplot(aes(Sex, Age, color = "Survived")) +
geom_miss_point()
# visualize `age` missing values by `Sex`
df %>%
ggplot(aes(Sex, Age)) +
geom_miss_point(aes(color = "Survived"))
# visualize `age` missing values by `Survived`
df %>%
ggplot(aes(Survived, Age)) +
geom_miss_point()
# visualize `age` missing values by `Survived`
df %>%
ggplot(aes(factor(Survived), Age)) +
geom_miss_point()
# visualize `age` missing values by `Pclass`
df %>%
ggplot(aes(factor(Pclass), Age)) +
geom_miss_point()
# visualize `age` missing values by `Sex`
df %>%
ggplot(aes(factor(Sex), Age)) +
geom_miss_point()
View(df)
# impute `Embarked` with mode
# create mode function
my_mode <- function(x) {
unique_x <- unique(x)
mode <- unique_x[which.max(tabulate(match(x, unique_x)))]
mode
}
# copy df to df_imp
df_imp <- df
df_imp[is.na(df_imp)] <- my_mode(df_imp[!is.na(df_imp)])
?mode
?Mode
??Mode
mode <- my_mode(df_imp$Embarked)
mode
df_imp %>%
count(Embarked, sort = TRUE)
df_imp$Embarked %>%
replace_na(mode)
df_imp$Embarked <- df_imp$Embarked %>%
replace_na(mode)
df_imp %>%
count(Embarked, sort = TRUE)
# impute `Age` and `Cabin` with missRanger
# create `Cabin_letter` from first cabin letter
substr(df_imp$Cabin, 1, 1)
# impute `Age` and `Cabin` with missRanger
# create `Cabin_letter` from first cabin letter
df_imp$Cabin_letter <- substr(df_imp$Cabin, 1, 1)
hed(df_imp)
head(df_imp)
View(df_imp)
df_imp$Cabin <- NULL
df_imp <- missRanger::missRanger(df_imp)
# verify missing values
colMeans(is.na(df_imp))
plot(density(df$Age))
plot(density(df$Age))
df$Age
plot(density(df$Age, na.rm = TRUE))
lines(density(df_imp$Age))
plot(density(df$Age, na.rm = TRUE), ylim = c(0, 0.05))
lines(density(df_imp$Age))
suppressMessages(library(tidyverse))
library(VIM)
library(naniar)
theme_set(theme_light())
# look at dataset
skimr::skim(df)
head(df)
# Little MCAR test
BaylorEdPsych::LittleMCAR(df_100)
# another MCAR test
MissMech::TestMCARNormality(df)
# another MCAR test
MissMech::TestMCARNormality(df_100)
# another MCAR test
MissMech::TestMCARNormality(df_100, method = "Hawkins")
# another MCAR test
MissMech::TestMCARNormality(df_100, del.lesscases = 3)
library(finalfit)
library(dplyr)
library(MissMech)
data("colon_s")
explanatory <- c("age", "nodes")
dependent <- "mort_5yr"
colon_s %>%
select(explanatory) %>%
TestMCARNormality()
skimr::skim(colon_s)
names(df)
# another MCAR test
df %>%
select(Survived, Age, Pclass, Sex, Parch) %>%
TestMCARNormality()
skimr::skim(df)
# another MCAR test
# convert `Sex` to 0 - Female, 1 - Male
df$Sex_num <- ifelse(df$Sex == "Male", 1, 0)
str(df)
table(df$Sex_num)
# another MCAR test
# convert `Sex` to 0 - Female, 1 - male
df$Sex_num <- ifelse(df$Sex == "male", 1, 0)
table(df$Sex_num)
table(df$Sex)
df %>%
select(Survived, Age, Pclass, Sex_num, Parch, Fare) %>%
TestMCARNormality()
df <- read_csv("train.csv")
# look at dataset
skimr::skim(df)
head(df)
# MCAR test
set.seed(42)
df_100 <- sample_n(df, 100)
# Little MCAR test
BaylorEdPsych::LittleMCAR(df_100)
# another MCAR test
# select numeric columns
df_num <- df %>%
select_if(is.numeric)
str(df_num)
# convert `Sex` to 0 - Female, 1 - male
df_num$Sex <- ifelse(df$Sex == "male", 1, 0)
str(df_num)
df %>%
select(-PassengerId) %>%
TestMCARNormality()
df_num %>%
select(-PassengerId) %>%
TestMCARNormality()
rm(colon_s)
suppressMessages(library(tidyverse))
library(VIM)
library(naniar)
theme_set(theme_light())
# read dataset
df_full <- read_csv("~/Downloads/titanic.csv")
# look at dataset
skimr::skim(df_full)
# drop unnecessary features (boat, home.dest, ) with high percentage of missing values
df_full <- df_full %>%
select(-boat, -body, -home.dest)
# visualize missing values
visdat::vis_dat(_full, palette = "qual")
# visualize missing values
visdat::vis_dat(df_full, palette = "qual")
visdat::vis_miss(df)
# extract Title from name (passenger name)
df_full$Title <- gsub('(.*, )|(\\..*)', '', df_full$Name)
# extract title from name (passenger name)
df_full$title <- gsub('(.*, )|(\\..*)', '', df_full$name)
# show title counts by sex
table(df_full$sex, df_full$title)
df_full$title
# extract title from name (passenger name)
df_full$title <- str_sub(df_full$name, str_locate(df_full$name, ",")[ , 1] + 2, str_locate(df_full$name, "\\.")[ , 1] - 1)
df_full$title
# extract title from name (passenger name)
df_full$title <- str_extract( df_full$ame, "(?<=\\s)[[:alpha:]]+(?=\\.)" )
# extract title from name (passenger name)
df_full$title <- str_extract(df_full$name, "(?<=\\s)[[:alpha:]]+(?=\\.)" )
df_full$title
# show title counts by sex
table(df_full$sex, df_full$title)
df_full %>%
count(title, sort = TRUE)
# titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# reassign mlle, ms, and mme accordingly
df_full$title[df_full$title == 'Mlle']  <- 'Miss'
df_full$title[df_full$title == 'Ms']    <- 'Miss'
df_full$title[df_full$title == 'Mme']   <- 'Mrs'
df_full$title[df_full$title %in% rare_title]  <- 'Rare Title'
# show title counts by sex
table(df_full$sex, df_full$title)
# titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
df_full$title[df_full$title %in% rare_title]  <- 'Rare Title'
# show title counts by sex
table(df_full$sex, df_full$title)
# extract cabin first letter
df_full$deck <- sapply(df_full$cabin, function(x) strsplit(x, NULL)[[1]][1])
df_full$cabin
# extract cabin first letter
df_full$deck <- substr(df_full$cabin, 1, 1)
df_full %>%
count(deck, sort = TRUE)
# drop name and cabin
df_full %>%
select(-name, -cabin)
# boxplot age by title
df_full %>%
ggplot(aes(title, age, fill = factor(title))) +
geom_boxplot() +
scale_fill_brewer(palette = "Set2")
library(mice)
## mice imputation
mice_imp <- mice(df_full, m = 5, seed = 42)
## mice imputation
mice_imp <- mice(df_full, m = 5, method = "rf", seed = 42)
skimr::skim(df_full)
# drop name and cabin
df_full <- df_full %>%
select(-name, -cabin)
skimr::skim(df_full)
df_full$deck <- as.factor(df_full$deck)
df_full$embarked <- as.factor(df_full$embarked)
## mice imputation
mice_imp <- mice(df_full, m = 5, seed = 42)
summary(mice_imp)
mice_imp$imp$embarked
mice_imp$imp$fare
## mice imputation
mice_imp <- mice(df_full, m = 5, maxit = 10, seed = 42)
summary(mice_imp)
## mice imputation
mice_imp <- mice(df_full, m = 10, maxit = 10, seed = 42)
summary(mice_imp)
mice_imp$imp$fare
mice_imp$imp$embarked
mice_imp$imp$deck
# build regression model
model_fit <- with(data = mice_imp, expr = lm(age ~ title + sex + pclass + sibsp + parch))
# combining results from all models
pool_out <- pool(model_fit)
summary(pool_out)
mice_out <- complete(mice_imp)
mice_out
mice_out
df_full
head(df_full, 20)
# imputation quality (age)
par(mfrow=c(1, 2))
hist(df_full$age, freq=F, main='Age: Original Data',
col='darkblue', ylim=c(0,0.04))
hist(mice_out$age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
par(mfrow=c(1, 1))
par(mfrow=c(1, 2))
hist(df_full$age, freq=F, main='Age: Original Data',
col='lightblue', ylim=c(0,0.04))
hist(mice_out$age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
par(mfrow=c(1, 1))
# use complete to get imputed values
mice_out <- complete(mice_imp, 10)
mice_out
par(mfrow=c(1, 2))
hist(df_full$age, freq=F, main='Age: Original Data',
col='lightblue', ylim=c(0,0.04))
hist(mice_out$age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
par(mfrow=c(1, 1))
# density plot
plot(density(df_full$age, na.rm = TRUE), ylim = c(0, 0.05))
lines(density(mice_out$age))
dim(mice_out)
# correlation matrix using DataExplorer
DataExplorer::plot_correlation(mice_out)
# read dataset
df <- read_csv("train.csv")
# look at dataset
skimr::skim(df)
head(df)
# another MCAR test for `Age`
# select numeric columns
df_num <- df %>%
select_if(is.numeric)
# convert `Sex` to 0 - Female, 1 - male
df_num$Sex <- ifelse(df$Sex == "male", 1, 0)
df_num %>%
select(-PassengerId) %>%
MissMech::TestMCARNormality()
# extract title from name (passenger name)
df_full$title <- str_extract(df_full$name, "(?<=\\s)[[:alpha:]]+(?=\\.)" )
# copy df to df_imp
df_imp <- df
# extract title from name (passenger name)
df_imp$title <- str_extract(df_imp$name, "(?<=\\s)[[:alpha:]]+(?=\\.)" )
# extract title from name (passenger name)
df_imp$Title <- str_extract(df_imp$Name, "(?<=\\s)[[:alpha:]]+(?=\\.)" )
# show title counts by sex
table(df_full$Sex, df_full$Title)
# show title counts by sex
table(df_imp$Sex, df_imp$Title)
# titles with very low cell counts to be combined to "rare" level
rare_title <- c('Dona', 'Lady', 'Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# reassign mlle, ms, and mme accordingly
df_imp$Title[df_imp$Title == 'Mlle']  <- 'Miss'
df_imp$Title[df_imp$Title == 'Ms']    <- 'Miss'
df_imp$Title[df_imp$Title == 'Mme']   <- 'Mrs'
df_imp$Title[df_imp$Title %in% rare_title]  <- 'Rare Title'
# show title counts by sex
table(df_imp$Sex, df_imp$Title)
# drop Name
df_imp$Name <- NULL
# impute `Age` and `Cabin` with missRanger
# create `Cabin_letter` from first cabin letter
df_imp$Cabin_letter <- substr(df_imp$Cabin, 1, 1)
df_imp$Cabin <- NULL
head(df_imp)
# drop PassengerID
df_imp$PassengerId <- NULL
head(df_imp)
# impute with missRanger
df_imp <- missRanger::missRanger(df_imp)
# verify missing values
colMeans(is.na(df_imp))
# impute quality
plot(density(df$Age, na.rm = TRUE), ylim = c(0, 0.05))
lines(density(df_imp$Age))
head(df_imp)
